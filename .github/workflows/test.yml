name: Test Suite

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.7.0"

jobs:
  # Main test job with matrix strategy
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        pnpm-version: [8, 9]
        include:
          - node-version: 18
            pnpm-version: 8
            test-coverage: true
          - node-version: 20
            pnpm-version: 8
            test-coverage: true
          - node-version: 20
            pnpm-version: 9
            test-coverage: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm ${{ matrix.pnpm-version }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ matrix.pnpm-version }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ matrix.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ matrix.pnpm-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check TypeScript types
        run: pnpm tsc --noEmit

      - name: Run linting
        run: |
          # Check if lint script exists in root package.json
          if npm run lint --if-present; then
            echo "✅ Linting passed"
          else
            echo "ℹ️ No lint script found, skipping linting"
          fi

      - name: Run tests
        run: |
          if [ "${{ matrix.test-coverage }}" = "true" ]; then
            echo "Running tests with coverage..."
            pnpm test:coverage || pnpm test
          else
            echo "Running tests without coverage..."
            pnpm test
          fi
        env:
          CI: true
          NODE_ENV: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: matrix.test-coverage == 'true'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Test individual packages
  test-packages:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        package:
          [
            core,
            cli,
            discord,
            mcp,
            mongodb,
            sei,
            supabase,
            telegram,
            create-agent,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test package ${{ matrix.package }}
        run: |
          if [ -d "packages/${{ matrix.package }}" ]; then
            echo "Testing package: ${{ matrix.package }}"
            cd "packages/${{ matrix.package }}"
            if [ -f "package.json" ]; then
              pnpm install --frozen-lockfile
              if pnpm test --if-present; then
                echo "✅ Tests passed for ${{ matrix.package }}"
              else
                echo "⚠️ No tests found for ${{ matrix.package }}"
              fi
            else
              echo "❌ No package.json found for ${{ matrix.package }}"
              exit 1
            fi
          else
            echo "ℹ️ Package ${{ matrix.package }} not found, skipping"
          fi

  # Test examples
  test-examples:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test examples
        run: |
          echo "🧪 Testing examples..."
          for example in examples/*/; do
            if [ -f "$example/package.json" ]; then
              echo "Testing example: $(basename $example)"
              cd "$example"
              pnpm install --frozen-lockfile
              if pnpm test --if-present; then
                echo "✅ Tests passed for $(basename $example)"
              else
                echo "⚠️ No tests found for $(basename $example)"
              fi
              cd ../..
            fi
          done

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Test with different Node.js versions
  test-node-versions:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with Node.js ${{ matrix.node-version }}
        run: pnpm test
        env:
          CI: true
          NODE_ENV: test

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance tests
        run: |
          echo "⚡ Running performance tests..."

          # Test build performance
          echo "📦 Testing build performance..."
          time pnpm run build:packages

          # Test test execution time
          echo "🧪 Testing test execution performance..."
          time pnpm test

          # Check bundle sizes
          echo "📊 Bundle size analysis:"
          for pkg in packages/*/; do
            if [ -d "$pkg/dist" ]; then
              size=$(du -sh "$pkg/dist" | cut -f1)
              echo "  $(basename $pkg): $size"
            fi
          done

  # Test failure notification
  notify-test-failure:
    runs-on: ubuntu-latest
    needs: [test, test-packages, test-examples, security-audit]
    if: failure() && github.event_name == 'pull_request'
    steps:
      - name: Notify test failure
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('❌ Test Suite failed')
            );

            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Test Suite failed**
                
                The automated tests have failed. Please review the logs and fix any issues before merging.
                
                🔗 [View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                
                **Failed jobs:**
                ${context.job}
                `
              });
            }
